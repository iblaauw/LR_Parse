#pragma once

#include "SymbolRegistry.h"
#include "Closure.h"

// A node in the state machine generated by ClosureTree
struct StateNode
{
    using Transition = std::pair<State, Symbol>;
    std::vector<Transition> children;
};

// Generates the state machine that is used to create the LR tables
class ClosureTree
{
private:
    ClosureRegistry& closures;

    std::map<State, StateNode> nodes;
    std::queue<State> stateQueue;
public:
    ClosureTree(ClosureRegistry& closures);
    void Build();

    inline const StateNode& GetNode(State state) const { return nodes.at(state); }

private:
    void DoBuild();
    void HandleState(State state);
};

